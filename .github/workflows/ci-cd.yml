name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: eu-west-1
  ECR_REPOSITORY_BACKEND: backend
  ECR_REPOSITORY_SIMULATOR: simulator
  EKS_CLUSTER_NAME: iot-cluster

jobs:
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  test:
    name: Test Applications
    runs-on: ubuntu-latest
    needs: security-scan
    strategy:
      matrix:
        app: [backend, simulator]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: ${{ matrix.app }}/package-lock.json

      - name: Install dependencies
        run: |
          cd ${{ matrix.app }}
          npm ci

      - name: Run linting
        run: |
          cd ${{ matrix.app }}
          npm run lint || echo "Linting not configured"

      - name: Run tests
        run: |
          cd ${{ matrix.app }}
          npm test || echo "Tests not configured"

  build-and-push:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Backend image
        uses: docker/build-push-action@v6
        with:
          context: ./backend
          push: true
          tags: |
            ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY_BACKEND }}:${{ github.sha }}
            ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY_BACKEND }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push Simulator image
        uses: docker/build-push-action@v6
        with:
          context: ./simulator
          push: true
          tags: |
            ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY_SIMULATOR }}:${{ github.sha }}
            ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY_SIMULATOR }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Save image tags
        run: |
          echo "BACKEND_IMAGE=${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY_BACKEND }}:${{ github.sha }}" >> $GITHUB_ENV
          echo "SIMULATOR_IMAGE=${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY_SIMULATOR }}:${{ github.sha }}" >> $GITHUB_ENV

  deploy-infrastructure:
    name: Deploy Infrastructure
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.5.0"

      - name: Terraform Init
        working-directory: ./infrastructure/terraform
        run: terraform init

      - name: Terraform Plan
        working-directory: ./infrastructure/terraform
        run: terraform plan -out=tfplan
        env:
          TF_VAR_environment: production

      - name: Terraform Apply
        working-directory: ./infrastructure/terraform
        run: terraform apply -auto-approve tfplan
        env:
          TF_VAR_environment: production

  deploy-application:
    name: Deploy Application
    runs-on: ubuntu-latest
    needs: [build-and-push, deploy-infrastructure]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Update kubeconfig
        run: aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.EKS_CLUSTER_NAME }}

      - name: Setup Helm
        uses: azure/setup-helm@v3
        with:
          version: v3.12.0

      - name: Deploy with Helm
        run: |
          # Update values with new image tags
          sed -i "s|backend:latest|${{ needs.build-and-push.outputs.BACKEND_IMAGE }}|g" chart/values-cloud.yaml
          sed -i "s|simulator:latest|${{ needs.build-and-push.outputs.SIMULATOR_IMAGE }}|g" chart/values-cloud.yaml
          
          # Deploy to EKS
          helm upgrade --install iot-system ./chart \
            --values chart/values-cloud.yaml \
            --namespace iot-system \
            --create-namespace \
            --wait \
            --timeout=10m

  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [deploy-application]
    if: always()
    
    steps:
      - name: Notify on Success
        if: needs.deploy-application.result == 'success'
        run: |
          echo "✅ Deployment successful!"
          # Add Slack/Discord/Email notification here if needed
          
      - name: Notify on Failure
        if: needs.deploy-application.result == 'failure'
        run: |
          echo "❌ Deployment failed!"
          # Add failure notification here if needed 